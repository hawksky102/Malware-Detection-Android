package com.app.phonecleaner.Fragment;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AppOpsManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.app.phonecleaner.Info.SDCardInfo;
import com.app.phonecleaner.MainActivity;
import com.app.phonecleaner.R;
import com.app.phonecleaner.Util.StorageUtil;
import com.github.lzyzsd.circleprogress.ArcProgress;

import java.util.Timer;
import java.util.TimerTask;

import static android.content.ContentValues.TAG;
import static android.content.Context.ACTIVITY_SERVICE;

public class FragmentSecurity extends Fragment {
    ImageView imageView;
    Switch aSwitch;
    TextView textView;
    SharedPreferences preferences;
    SharedPreferences.Editor editor;
    OnCallbackReceived mCallback;
    Context context;
    Button buttonShowAllApps;
    ArcProgress arcStore;
    ArcProgress arcProcess;
    TextView capacity, textFolder, textSubFolder;
    ImageView Rubish_clean, cleanBackApps, deleteApps;
    private Timer timer;
    private Timer timer2;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_security, container, false);
        imageView = v.findViewById(R.id.situationLogo);
        aSwitch = v.findViewById(R.id.switchRun);
        textView = v.findViewById(R.id.txtSituation);
        buttonShowAllApps = v.findViewById(R.id.buttonShowAllApps);
        arcProcess = v.findViewById(R.id.arc_process);
        capacity = v.findViewById(R.id.capacity);
        arcStore = v.findViewById(R.id.arc_store);
        context = getActivity();
        preferences = PreferenceManager.getDefaultSharedPreferences(context);
        editor = preferences.edit();
        if ((preferences.getBoolean("Protected", false))) {
            textView.setText("Device is protected");
            imageView.setImageResource(R.drawable.logoprotected);
            aSwitch.setChecked(true);
            buttonShowAllApps.setVisibility(View.VISIBLE);
        }
        try {
            mCallback = (OnCallbackReceived) getActivity(); //Create callback
        } catch (ClassCastException e) {
            e.printStackTrace();
        }
        aSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { //Switch listener
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    imageView.setImageResource(R.drawable.logoprotected);
                    textView.setText("Device is protected");
                    mCallback.protection(true); //Run callback for changing background color to green-blue
                    buttonShowAllApps.setVisibility(View.VISIBLE);
                    if (!isAccessGranted()) {
                        Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
                        startActivity(intent);
                        Toast.makeText(getActivity(),"Please select Toxic Anti-Malware app and allow permission",Toast.LENGTH_LONG).show();
                    } else {
                        //loadFragment(new FragmentViewDataUsage());
                    }

                } else {
                    imageView.setImageResource(R.drawable.logonotprotected);
                    textView.setText("Device is not protected");
                    mCallback.protection(false); //Run callback for changing background color to red-blue
                    buttonShowAllApps.setVisibility(View.INVISIBLE);

                }

            }
        });
        buttonShowAllApps.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!isAccessGranted()) {
                    Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
                    startActivity(intent);
                    Toast.makeText(getActivity(),"Please select Toxic Anti-Malware app and allow permission",Toast.LENGTH_LONG).show();
                } else {
                    loadFragment(new FragmentViewDataUsage());
                }

            }
        });
        if (!isAccessGranted()) {
            Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
            startActivity(intent);
            Toast.makeText(getActivity(),"Please select Toxic Anti-Malware app and allow permission",Toast.LENGTH_LONG).show();
        }

        return v;
    }
    @Override
    public void onResume() {
        super.onResume();
        fillData();
    }
    public interface OnCallbackReceived {    // Inner interface implemented in MainActivity for override and change background
        void protection(boolean isProtected);// MainActivity 87
    }

    private boolean loadFragment(Fragment fragment) { //Switch fragments
        //switching fragment
        if (fragment != null) {
            getActivity().getSupportFragmentManager()
                    .beginTransaction()
                    .setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out) // Fade in/out animation
                    .replace(R.id.fragment_container, fragment)
                    .commit();
            return true;
        }
        return false;
    }

    private boolean isAccessGranted() {
        try {
            PackageManager packageManager = getActivity().getPackageManager();
            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(getActivity().getPackageName(), 0);
            AppOpsManager appOpsManager = (AppOpsManager) getActivity().getSystemService(Context.APP_OPS_SERVICE);
            int mode = 0;
            if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.KITKAT) {
                mode = appOpsManager.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS,
                        applicationInfo.uid, applicationInfo.packageName);
            }
            return (mode == AppOpsManager.MODE_ALLOWED);

        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        Log.i(TAG, "onRequestPermissionResult");
        Toast.makeText(getActivity(),String.valueOf(requestCode),Toast.LENGTH_LONG).show();

        if (requestCode == 123) {
            if (grantResults.length <= 0) {
                // If user interaction was interrupted, the permission request is cancelled and you
                // receive empty arrays.
                Log.i(TAG, "User interaction was cancelled.");
            } else if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {

            } else {
                loadFragment(new FragmentViewDataUsage());
            }
        }
    }
    private void fillData() {
        // TODO Auto-generated method stub
        timer = null;
        timer2 = null;
        timer = new Timer();
        timer2 = new Timer();

        ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
        ActivityManager activityManager = (ActivityManager) getActivity().getSystemService(ACTIVITY_SERVICE);
        activityManager.getMemoryInfo(mi);
        double availableMegs = mi.availMem / 0x100000L;
        double percentAvail = mi.availMem / (double)mi.totalMem * 100.0;


//        long l = AppUtil.getAvailMemory(mContext);
//        long y = AppUtil.getTotalMemory(mContext);
//        final double x = (((y - l) / (double) y) * 100);
//        //   arcProcess.setProgress((int) x);
        final double x = 100 - percentAvail;
        arcProcess.setProgress(0);
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {


                        if (arcProcess.getProgress() >= (int) x) {
                            timer.cancel();
                        } else {
                            arcProcess.setProgress(arcProcess.getProgress() + 1);
                        }

                    }
                });
            }
        }, 50, 20);

        SDCardInfo mSDCardInfo = StorageUtil.getSDCardInfo();
        SDCardInfo mSystemInfo = StorageUtil.getSystemSpaceInfo(getContext());

        long nAvailaBlock;
        long TotalBlocks;
        if (mSDCardInfo != null) {
            nAvailaBlock = mSDCardInfo.free + mSystemInfo.free;
            TotalBlocks = mSDCardInfo.total + mSystemInfo.total;
        } else {
            nAvailaBlock = mSystemInfo.free;
            TotalBlocks = mSystemInfo.total;
        }

        final double percentStore = (((TotalBlocks - nAvailaBlock) / (double) TotalBlocks) * 100);

        capacity.setText(StorageUtil.convertStorage(TotalBlocks - nAvailaBlock) + "/" + StorageUtil.convertStorage(TotalBlocks));
        arcStore.setProgress(0);

        timer2.schedule(new TimerTask() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {


                        if (arcStore.getProgress() >= (int) percentStore) {
                            timer2.cancel();
                        } else {
                            arcStore.setProgress(arcStore.getProgress() + 1);
                        }

                    }
                });
            }
        }, 50, 20);


    }
}
