package com.app.phonecleaner.Fragment;


import android.Manifest;
import android.annotation.SuppressLint;
import android.app.ActivityManager;
import android.app.AppOpsManager;
import android.app.Dialog;
import android.app.usage.NetworkStats;
import android.app.usage.NetworkStatsManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.ConnectivityManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import com.app.phonecleaner.Info.SDCardInfo;
import com.app.phonecleaner.MainActivity;
import com.app.phonecleaner.R;
import com.app.phonecleaner.Service.BackgroundService;
import com.app.phonecleaner.Util.StorageUtil;
import com.github.lzyzsd.circleprogress.ArcProgress;
import com.skyfishjy.library.RippleBackground;

import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import io.github.nikhilbhutani.analyzer.DataAnalyzer;

import static android.content.Context.ACTIVITY_SERVICE;


/**
 * A simple {@link Fragment} subclass.
 */
public class FragmentScan extends Fragment {

    ArcProgress arcStore;
    ArcProgress arcProcess;
    TextView capacity, textFolder, textSubFolder;
    ImageView Rubish_clean;
    Context mContext;
    Button BtnSettigs;
    private Timer timer;
    private Timer timer2;
    Button CleanRubbish;
    private static final int quickScan = 0, fullScan = 1;
    private int fileScaned = 0;
    private int threatCount = 0;
    public static ArrayList<String> infectedFiles = new ArrayList<String>();
    public static ArrayList<String> infectedFilesLoc = new ArrayList<String>();
    public static ArrayList<String> scanedFiles = new ArrayList<String>();
    public static final String VIRUS_IDENTTITY = ".prop";
    public int j = 0;
    public int k = 0;
    public int l = 0;
    public int m = 0;
    private Handler mHandler;
    private Handler mHandlerSub;
    public String directory = "";
    public String fielsFound = "";
    public String directoryFound = "";
    public int countScan = 0;
    public int startCount = 0;
    RippleBackground rippleBackground;
    ImageView imageView;
    boolean finishFiles = false;
    DataAnalyzer dataAnalyzer;
    boolean check_run = false;


    public FragmentScan() {
        // Required empty public constructor
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_main, container, false);
//        getActivity().stopService(new Intent(getContext(), BackgroundService.class));
        arcProcess = view.findViewById(R.id.arc_process);
        capacity = view.findViewById(R.id.capacity);
        arcStore = view.findViewById(R.id.arc_store);
        textFolder = view.findViewById(R.id.textFolder);
        textSubFolder = view.findViewById(R.id.textSubFolder);
        textFolder.setVisibility(View.INVISIBLE);
        textSubFolder.setVisibility(View.INVISIBLE);
        rippleBackground=(RippleBackground)view.findViewById(R.id.content);
        //Toast.makeText(getContext(),String.valueOf(countScan)+"-"+String.valueOf(startCount)+"-"+finishFiles,Toast.LENGTH_LONG).show();
//        if (!isAccessGranted()) {
//            Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
//            startActivity(intent);
//        }
        dataAnalyzer = new DataAnalyzer(getActivity());

        imageView=(ImageView)view.findViewById(R.id.centerImage);
            imageView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                        if (countScan == 0) {
                            check_run = true;
                            infectedFiles = new ArrayList<String>();
                            infectedFilesLoc = new ArrayList<String>();
                            scanedFiles = new ArrayList<String>();
                            rippleBackground.startRippleAnimation();
                            j = 0;
                            mHandlerSub = new Handler();
                            mHandlerSub.post(mUpdateSub);
                            k = 0;
                            directory = Environment.getExternalStorageDirectory().getAbsolutePath();
                            new Timer().schedule(new TimerTask() {
                                @Override
                                public void run() {
                                    listf(Environment.getExternalStorageDirectory().getAbsolutePath());
                                }
                            }, 1000);
//                            ScheduledExecutorService worker = Executors.newSingleThreadScheduledExecutor();
//
//                            Runnable runnable = new Runnable() {
//                                public void run() {
//                                    listf(Environment.getExternalStorageDirectory().getAbsolutePath());
//                                }
//                            };
//                            worker.schedule(runnable, 2, TimeUnit.SECONDS);
//                              AsyncTask.execute(new Runnable() {
//                                @Override
//                                public void run() {
//                                    try {
//                                        Thread.sleep(1000);
//                                        listf(Environment.getExternalStorageDirectory().getAbsolutePath());
//                                    } catch (InterruptedException e) {
//                                        e.printStackTrace();
//                                    }
//                                }
//                            });
                            //getScannedData(fullScan);
                            imageView.setImageResource(R.drawable.scanning_btn);
                            textFolder.setVisibility(View.VISIBLE);
                            textSubFolder.setVisibility(View.VISIBLE);
                            countScan++;
                        } else {
                            showStopDialog();
                        }

                }
            });


        return view;
    }

    private void showStopDialog() {
        final Dialog dialog = new Dialog(getActivity());
        dialog.setContentView(R.layout.custom_stop_dialog);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        TextView textDetails = dialog.findViewById(R.id.delete_package);
        Button cancelBtn = dialog.findViewById(R.id.btn_got);
        Button yesBtn = dialog.findViewById(R.id.btn_yes);
        cancelBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog.cancel();
            }
        });
        yesBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                rippleBackground.stopRippleAnimation();
                dialog.cancel();
                startCount = 0;
                finishFiles = false;
                mHandlerSub.removeCallbacks(mUpdateSub);
                check_run = false;
                loadFragment(new FragmentResults());
                //startActivity(new Intent(getActivity(),TabResults.class));

            }
        });
        dialog.show();
    }

    @Override
    public void onResume() {
        super.onResume();
        infectedFiles = new ArrayList<String>();
        infectedFilesLoc = new ArrayList<String>();
        scanedFiles = new ArrayList<String>();
        fillData();
    }

    public void freeMemory(){
        System.runFinalization();
        Runtime.getRuntime().gc();
        System.gc();
        trimCache(getActivity());
    }
    private void fillData() {
        // TODO Auto-generated method stub
        timer = null;
        timer2 = null;
        timer = new Timer();
        timer2 = new Timer();

        ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
        ActivityManager activityManager = (ActivityManager) getActivity().getSystemService(ACTIVITY_SERVICE);
        activityManager.getMemoryInfo(mi);
        double availableMegs = mi.availMem / 0x100000L;
        double percentAvail = mi.availMem / (double)mi.totalMem * 100.0;


//        long l = AppUtil.getAvailMemory(mContext);
//        long y = AppUtil.getTotalMemory(mContext);
//        final double x = (((y - l) / (double) y) * 100);
//        //   arcProcess.setProgress((int) x);
        final double x = 100 - percentAvail;
        arcProcess.setProgress(0);
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {


                        if (arcProcess.getProgress() >= (int) x) {
                            timer.cancel();
                        } else {
                            arcProcess.setProgress(arcProcess.getProgress() + 1);
                        }

                    }
                });
            }
        }, 50, 20);

        SDCardInfo mSDCardInfo = StorageUtil.getSDCardInfo();
        SDCardInfo mSystemInfo = StorageUtil.getSystemSpaceInfo(mContext);

        long nAvailaBlock;
        long TotalBlocks;
        if (mSDCardInfo != null) {
            nAvailaBlock = mSDCardInfo.free + mSystemInfo.free;
            TotalBlocks = mSDCardInfo.total + mSystemInfo.total;
        } else {
            nAvailaBlock = mSystemInfo.free;
            TotalBlocks = mSystemInfo.total;
        }

        final double percentStore = (((TotalBlocks - nAvailaBlock) / (double) TotalBlocks) * 100);

        capacity.setText(StorageUtil.convertStorage(TotalBlocks - nAvailaBlock) + "/" + StorageUtil.convertStorage(TotalBlocks));
        arcStore.setProgress(0);

        timer2.schedule(new TimerTask() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {


                        if (arcStore.getProgress() >= (int) percentStore) {
                            timer2.cancel();
                        } else {
                            arcStore.setProgress(arcStore.getProgress() + 1);
                        }

                    }
                });
            }
        }, 50, 20);


    }
    public static void trimCache(Context context) {
        try {
            File dir = context.getCacheDir();
            if (dir != null && dir.isDirectory()) {
                deleteDir(dir);
            }
        } catch (Exception e) {
            // TODO: handle exception
        }
    }

    public static boolean deleteDir(File dir) {
        if (dir != null && dir.isDirectory()) {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }

        // The directory is now empty so delete it
        return dir.delete();
    }



    public void listf(String directoryName) {

        File directory = new File(directoryName);
        // Get all files from a directory.
        Log.e("hahah",directory.getAbsolutePath());
        File[] fList = directory.listFiles();

        if(fList != null)
            for (File file : fList) {
                if(!check_run){
                    break;
                }
                if (file.isFile()) {
                    fielsFound = String.valueOf(file.getName());
                    if(file.getName().contains(VIRUS_IDENTTITY) || file.getName().contains(".troj")){
                        infectedFiles.add(file.getName());
                        infectedFilesLoc.add(file.getAbsolutePath());
                    }
                    scanedFiles.add(file.getAbsolutePath());
                    l++;
                } else if (file.isDirectory()) {
                    directoryFound = file.getAbsolutePath();
                    listf(file.getAbsolutePath());
                    l++;
                }
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }



    }

    private Runnable mUpdateSub = new Runnable() {

        public void run() {
            textFolder.setText(directoryFound);
            textSubFolder.setText(fielsFound);
//            Toast.makeText(getContext(),"why",Toast.LENGTH_LONG).show();
            if(finishFiles){
                rippleBackground.stopRippleAnimation();
                imageView.setImageResource(R.drawable.scan_btn);

            }
            else{
                rippleBackground.startRippleAnimation();
                imageView.setImageResource(R.drawable.scanning_btn);
            }
            if(l == k){
                startCount++;
                if(startCount>3) {
                    finishFiles = true;
                    startCount = 0;
                }
            }
            else{
                finishFiles  = false;
            }
            k = l;
            mHandlerSub.postDelayed(this,500);

        }

    };

    private void getScannedData(int scanType) {

        try {

            File fileList;

            if (scanType == quickScan) {

                fileList = new File("/sdcard");
            } else {

                fileList = new File(Environment.getExternalStorageDirectory().getAbsolutePath());
            }
      //      Toast.makeText(getActivity(),String.valueOf(fileList),Toast.LENGTH_LONG).show();
            if (fileList != null) {

               final File[] filenames = fileList.listFiles();

                for (int i = 0; i < filenames.length; i++) {

                    final int current = i;
                    //  Toast.makeText(getActivity(),String.valueOf(filenames.length),Toast.LENGTH_LONG).show();

                    Thread.sleep(100);

                    fileScaned++;
                    scanedFiles.add(String.valueOf(filenames[i]));


                    Log.e("************", "**************");
                    Log.e("Main Directory Name", ": " + filenames[i]);
                 //   listf(String.valueOf(filenames[i]));

//
//                    if ((filenames[i].toString()).contains(VIRUS_IDENTTITY)) {
//
//                        infectedFiles.add(String.valueOf(filenames[i]));
//
//                        threatCount++;
//                        Log.e("Threat Found", ": " + filenames[i]);
//                    }
//
//                    if (filenames[i].isDirectory()) {
//
//                        File[] fl = filenames[i].listFiles();
//
//                        if (fl != null) {
//                            Log.v("Sub Directory", ": " + fl.length);
//
//                            for (int j = 0; j < fl.length; j++) {
//
//                                fileScaned++;
//                                scanedFiles.add(String.valueOf(filenames[i]));
//
//                                Log.e("Sub Directory Name", ": " + fl[j]);
//                                Log.e("************", "**************");
//
//                                try {
//                                    File myFile = new File(
//                                            String.valueOf(fl[j]));
//                                    FileInputStream fIn = new FileInputStream(
//                                            myFile);
//                                    BufferedReader myReader = new BufferedReader(
//                                            new InputStreamReader(fIn));
//                                    String aDataRow = "";
//                                    String aBuffer = "";
//                                    while ((aDataRow = myReader.readLine()) != null) {
//                                        aBuffer += aDataRow + "\n";
//                                    }
//
//                                    Log.d("Buffer: ", ": " + aBuffer);
//
//                                    if (aBuffer.contains(VIRUS_IDENTTITY)) {
//
//                                        infectedFiles
//                                                .add(String.valueOf(fl[j]));
//
//                                        threatCount++;
//                                        Log.e("Threat Found", ": " + fl[j]);
//                                    }
//
//                                    myReader.close();
//                                } catch (Exception e) {
////                                    Toast.makeText(getActivity(),
////                                            e.getMessage(), Toast.LENGTH_SHORT)
////                                            .show();
//                                }
//                            }
//                        }
//                    }
//
//                    if (i == (filenames.length - 1)) {
////                        startActivity(new Intent(HomeActivity.this,
////                                ResultActivity.class).putExtra("fileScaned",
////                                fileScaned)
////                                .putExtra("threatCount", threatCount));
//                    }
                }
                Log.e("hahahha", String.valueOf(scanedFiles));
            }

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
    }




    private boolean isAccessGranted() {
        try {
            PackageManager packageManager = getActivity().getPackageManager();
            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(getContext().getPackageName(), 0);
            AppOpsManager appOpsManager = (AppOpsManager) getActivity().getSystemService(Context.APP_OPS_SERVICE);
            int mode = 0;
            if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.KITKAT) {
                mode = appOpsManager.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS,
                        applicationInfo.uid, applicationInfo.packageName);
            }
            return (mode == AppOpsManager.MODE_ALLOWED);

        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }
    public static String humanReadableByteCount(long bytes) {
        int unit = 1024;
        if (bytes < unit) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format(Locale.getDefault(), "%.1f %sB", bytes / Math.pow(unit, exp), pre);
    }
    private boolean loadFragment(Fragment fragment) { //Switch fragments
        //switching fragment
        if (fragment != null) {
            getActivity().getSupportFragmentManager()
                    .beginTransaction()
                    .setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out) // Fade in/out animation
                    .replace(R.id.fragment_container, fragment)
                    .commit();
            return true;
        }
        return false;
    }

}
