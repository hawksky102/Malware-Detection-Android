package com.app.phonecleaner.Fragment;


import android.annotation.SuppressLint;
import android.app.AppOpsManager;
import android.app.usage.NetworkStats;
import android.app.usage.NetworkStatsManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import android.text.format.DateFormat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.Toast;

import com.app.phonecleaner.Adapter.CustomListAdapterApps;
import com.app.phonecleaner.R;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

/**
 * A simple {@link Fragment} subclass.
 */
public class FragmentViewDataUsage extends Fragment {

    ArrayList<String> packageName;
    ArrayList<String> applicationName;
    ArrayList<String> rxData;
    ArrayList<String> txData;
    ArrayList<Bitmap> applicationIcon;
    String[] applicationNameArr;
    Bitmap[] applucationIconArr;
    String[] applicationPackageArr;
    String[] applicationRxArr;
    String[] applicationTxArr;

    ListView listView;
    public CustomListAdapterApps customListAdapterApps;
    public FragmentViewDataUsage() {
        // Required empty public constructor
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View dataUsage = inflater.inflate(R.layout.fragment_fragment_view_data_usage, container, false);
        packageName = new ArrayList<String>();
        applicationName = new ArrayList<String>();
        rxData = new ArrayList<String>();
        txData = new ArrayList<String>();
        applicationIcon = new ArrayList<Bitmap>();
        listView = dataUsage.findViewById(R.id.list_apps);

        getAllApps();

        return dataUsage;
    }

    public void getAllApps(){
        Calendar cal1 = Calendar.getInstance();
        cal1.add(Calendar.DATE, 1);
        Date end = cal1.getTime();
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        String dateString = DateFormat.format("MM/dd/yyyy", new Date(cal.getTimeInMillis())).toString();
        Toast.makeText(getContext(),dateString,Toast.LENGTH_LONG).show();

        long start = cal.getTime().getTime();


        PackageManager packageManager = getActivity().getPackageManager();
        Intent intent = new Intent(Intent.ACTION_MAIN, null);
        intent.addCategory(Intent.CATEGORY_LAUNCHER);
        List<ResolveInfo> package_name = packageManager.queryIntentActivities(intent, 0);

        for (ResolveInfo resolveInfo : package_name) {
            int uid = 0;
            try {
                uid = getActivity().getPackageManager().getApplicationInfo(String.valueOf(resolveInfo.activityInfo.packageName), 0).uid;
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }
            Log.e("--------","---------------------------------");
            getNetStats(getActivity(), cal.getTimeInMillis(), cal1.getTimeInMillis(), ConnectivityManager.TYPE_WIFI,uid, resolveInfo.activityInfo.packageName,
                    resolveInfo.loadLabel(packageManager).toString(), resolveInfo.activityInfo.loadIcon(packageManager));
        }

        applicationNameArr = new String[applicationName.size()];
        applucationIconArr = new Bitmap[applicationIcon.size()];
        applicationPackageArr = new String[packageName.size()];
        applicationRxArr = new String[rxData.size()];
        applicationTxArr = new String[txData.size()];

        applicationNameArr = applicationName.toArray(applicationNameArr);
        applucationIconArr = applicationIcon.toArray(applucationIconArr);
        applicationPackageArr = packageName.toArray(applicationPackageArr);
        applicationTxArr = txData.toArray(applicationTxArr);
        applicationRxArr = rxData.toArray(applicationRxArr);

        customListAdapterApps = new CustomListAdapterApps(getActivity(), applicationNameArr, applucationIconArr, applicationPackageArr, applicationTxArr, applicationRxArr);
        listView.setAdapter(customListAdapterApps);

    }

    public void getNetStats(@NonNull Context context, long startTime, long endTime, int netType, int uid, String packagename, String applicationname, Drawable applicationicon) {
        long netDataReceive = 0;
        long netDataSend = 0;
        String subId = null;
        @SuppressLint("WrongConstant") NetworkStatsManager manager = (NetworkStatsManager) context.getApplicationContext().
                getSystemService(Context.NETWORK_STATS_SERVICE);

        if (manager == null) {
        }
        NetworkStats networkStats = null;
        // NetworkStats.Bucket bucket = new NetworkStats.Bucket();
        try {
            networkStats = manager.queryDetailsForUid(netType, subId, startTime, endTime, uid);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Log.d("Startdate: ",""+startTime+"   ");
        Log.d("Enddate: ",""+endTime+"    ");
        long tx = 0L;
        long rx = 0L;
        NetworkStats.Bucket bucket = new NetworkStats.Bucket();
        while (networkStats != null && networkStats.hasNextBucket()) {
            networkStats.getNextBucket(bucket);
            tx += bucket.getTxBytes();
            rx += bucket.getRxBytes();
            // Log.d("tag1","StartTime: "+bucket.getStartTimeStamp());
            // Log.d("tag1","EndTime: "+bucket.getEndTimeStamp());
        }
        if(tx != 0 || rx != 0){
            packageName.add(packagename);
            applicationName.add(applicationname);
            rxData.add(humanReadableByteCount(rx));
            txData.add(humanReadableByteCount(tx));
            applicationIcon.add(drawableToBitmap(applicationicon));
            Log.e("Sent", humanReadableByteCount(tx));
            Log.e("Recieved", humanReadableByteCount(rx));

        }


    }
    public static String humanReadableByteCount(long bytes) {
        int unit = 1024;
        if (bytes < unit) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format(Locale.getDefault(), "%.1f %sB", bytes / Math.pow(unit, exp), pre);
    }
    public static Bitmap drawableToBitmap (Drawable drawable) {
        Bitmap bitmap = null;

        if (drawable instanceof BitmapDrawable) {
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
            if(bitmapDrawable.getBitmap() != null) {
                return bitmapDrawable.getBitmap();
            }
        }

        if(drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {
            bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888); // Single color bitmap will be created of 1x1 pixel
        } else {
            bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        }

        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);
        return bitmap;
    }
}
