package com.app.phonecleaner.Fragment;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import com.app.phonecleaner.R;

import java.io.File;

public class FragmentClean extends Fragment {
    File root = android.os.Environment.getExternalStorageDirectory(); //Internal storage path
    private static final String FOLDER_NAME = "";
    final String FOLDER_LOCATION = root.getAbsolutePath() + "/" + FOLDER_NAME; // Root directory for start point of scan
    int totalDeleted;
    boolean isFinished = false;
    Context context;
    ImageButton button;
    TextView txtResult;
    ProgressBar progressBar; // Progressbar is invisible on default, it is visible only when removing junk files.

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_clean, container, false);
        button = v.findViewById(R.id.imageButton);
        txtResult = v.findViewById(R.id.txtResult);
        progressBar = v.findViewById(R.id.progressBar);
        context = getActivity();

        if (ContextCompat.checkSelfPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE) //Check and request read and write permission
                + ContextCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    || ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE)
            ) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                    ActivityCompat.requestPermissions(getActivity(),
                            new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE},
                            1);
                }
            } else {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                    ActivityCompat.requestPermissions(getActivity(),
                            new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
                                    Manifest.permission.READ_EXTERNAL_STORAGE},
                            1);
                }
            }
        } else {
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    totalDeleted = 0;
                    //operation
                    checkAndRemoveFiles();
                }
            });
        }
        return v;
    }

    private void checkAndRemoveFiles() { //Loop for remove junk files
        new FileScanTask(progressBar,txtResult).execute(); //ProgressBar and TextView as parameter for access in AsyncTask
    }

    private class FileScanTask extends AsyncTask<Void, Void, Void> { //Async Task for show progressbar and hide
        ProgressBar progressBar;
        TextView txtResult;
        //initiate vars
        public FileScanTask(ProgressBar progressBar,TextView txtResult) {
            super();
            this.progressBar=progressBar;
            this.txtResult=txtResult;
            totalDeleted=0;
        }

        @Override
        protected void onPreExecute() { // Before executes folder scan
            super.onPreExecute();
            progressBar.setVisibility(View.VISIBLE);
        }

        protected Void doInBackground(Void... params) { // Folder scan
            do {
                isFinished = true;
                removeFolders(FOLDER_LOCATION);
            } while (!isFinished);
            return null;
        }

        @Override
        protected void onPostExecute(Void result) { // After executes folder scan
            progressBar.setVisibility(View.INVISIBLE);
            progressBar.setVisibility(View.INVISIBLE);
            txtResult.setVisibility(View.VISIBLE);
            txtResult.setText("Junk "+totalDeleted+" files deleted!");
        }
        private void removeFolders(String folder_location) { // Scan and remove folder
            final File folder = new File(folder_location);
            final File[] listOfFiles = folder.listFiles();

            if (listOfFiles.length == 0) {
                totalDeleted++; // Delete counter
                folder.delete();
                isFinished = false;
            } else {
                for (File file : listOfFiles) {
                    if (file.isDirectory()) {
                        removeFolders(file.getAbsolutePath());
                    }
                }
            }


        }
    }

}
