package com.app.phonecleaner.Fragment;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.app.phonecleaner.Info.SDCardInfo;
import com.app.phonecleaner.R;
import com.app.phonecleaner.Util.StorageUtil;
import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.components.Description;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;
import com.github.mikephil.charting.utils.ColorTemplate;

import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;

import static android.content.Context.ACTIVITY_SERVICE;

public class FragmentStorage extends Fragment {

    TextView txtFreeValue;
    TextView txtUsedValue;
    TextView txtTotalValue;
    Context context;
    File file;
    static long usedSize;
    static long freeSize;
    static long totalSize;
    static long space;
    PieChart pieChart;
    private long usedP, freeP;
    String freeSizeStr, usedSizeStr, totalSizeStr;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_storage, container, false);
        context = getActivity().getApplicationContext();
        ButterKnife.bind(context, v);//It is
       // file = new File(Environment.getDataDirectory().getPath()); //Internal storage filepath
        pieChart = v.findViewById(R.id.pieChart);
        txtFreeValue = v.findViewById(R.id.txtFreeValue);
        txtUsedValue = v.findViewById(R.id.txtUsedValue);
        txtTotalValue = v.findViewById(R.id.txtTotalValue);
        createPieChart();
        return v;
    }

    private void createPieChart() {        //PieChart configuration
        pieChart.setUsePercentValues(true);//For more information https://github.com/PhilJay/MPAndroidChart
        pieChart.setDrawHoleEnabled(false);
        List<PieEntry> value = new ArrayList<>();
        //setMemories();

        SDCardInfo mSDCardInfo = StorageUtil.getSDCardInfo();
        SDCardInfo mSystemInfo = StorageUtil.getSystemSpaceInfo(getContext());

        long nAvailaBlock;
        long TotalBlocks;
        if (mSDCardInfo != null) {
            nAvailaBlock = mSDCardInfo.free + mSystemInfo.free;
            TotalBlocks = mSDCardInfo.total + mSystemInfo.total;
        } else {
            nAvailaBlock = mSystemInfo.free;
            TotalBlocks = mSystemInfo.total;
        }
        String tmpstr = StorageUtil.convertStorage(TotalBlocks - nAvailaBlock);
        String asd[] = tmpstr.split(" ");
        double avail = Double.parseDouble(asd[0]);

        String tmpstr1 = StorageUtil.convertStorage(TotalBlocks);
        String asd1[] = tmpstr1.split(" ");
        double avail1 = Double.parseDouble(asd1[0]);


      //  Toast.makeText(getContext(),String.valueOf(avail)+"/"+String.valueOf(avail1),Toast.LENGTH_LONG).show();

        final double percentStore = (((TotalBlocks - nAvailaBlock) / (double) TotalBlocks) * 100);

      //  capacity.setText(StorageUtil.convertStorage(TotalBlocks - nAvailaBlock) + "/" + StorageUtil.convertStorage(TotalBlocks));

        freeP = getAvailableInternalStoragePercentage();
        usedP=100-freeP;
        usedSizeStr=formatSize(usedSize);
        freeSizeStr=formatSize(freeSize);
        totalSizeStr=formatSize(totalSize);
        txtFreeValue.setText(freeSizeStr);
        txtUsedValue.setText(usedSizeStr);
        txtTotalValue.setText(totalSizeStr);
        Description desc = new Description();
        desc.setText("Internal storage");
        desc.setTextAlign(Paint.Align.LEFT);
        desc.setTextSize(20f);
        desc.setTextColor(Color.WHITE);
        pieChart.setDescription(desc);
        value.add(new PieEntry(Integer.valueOf((int) percentStore), "% Used"));
        value.add(new PieEntry(Integer.valueOf(100 - (int) percentStore), "% Free"));
        PieDataSet pieDataSet = new PieDataSet(value, "Internal Storage");
        PieData pieData = new PieData(pieDataSet);
        pieData.setValueTextSize(20f);
        pieData.setValueTextColor(Color.WHITE);
        Legend legend = pieChart.getLegend();
        legend.setTextColor(Color.WHITE);
        pieChart.setData(pieData);
        pieChart.getDescription().setEnabled(false);
        pieDataSet.setColors(ColorTemplate.PASTEL_COLORS);
        pieChart.animateXY(1400, 1400);
    }

    public static String floatForm(double d) {
        return new DecimalFormat("#.##").format(d);
    }

    private int getAvailableInternalStoragePercentage() {
        File path = Environment.getExternalStorageDirectory();
        StatFs stat = new StatFs(path.getPath());
        long blockSize = stat.getBlockSize();
        @SuppressWarnings("deprecation") long totalBlocks = stat.getBlockCount();
        totalSize = totalBlocks * blockSize;
        @SuppressWarnings("deprecation") long availableBlocks = stat.getAvailableBlocks();
        freeSize = availableBlocks * blockSize;
        usedSize=totalSize-freeSize;
        Log.d("here is", "" + ((freeSize * 100) / totalSize));
        int size = (int) ((freeSize * 100) / totalSize);
        return 100 - size;
    }

    private static String formatSize(long size) {
        String suffix = null;
        if (size >= 1024) {
            suffix = "KB";
            size /= 1024;
            if (size >= 1024) {
                suffix = "MB";
                size /= 1024;
                if (size >= 1024) {
                    suffix = "GB";
                    size /= 1024;
                }
            }
        }
        StringBuilder resultBuffer = new StringBuilder(Long.toString(size)); //Data
        int commaOffset = resultBuffer.length() - 3;
        while (commaOffset > 0) {
            resultBuffer.insert(commaOffset, ',');
            commaOffset -= 3;
        }

        if (suffix != null) resultBuffer.append(suffix);
        return resultBuffer.toString();
    }
}
